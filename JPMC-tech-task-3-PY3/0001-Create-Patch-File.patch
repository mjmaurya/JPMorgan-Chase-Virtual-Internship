From a441824dd6b716f9e4e2b98bafab801cddf217c4 Mon Sep 17 00:00:00 2001
From: Manoj Kumar <mjmaurya143@gmail.com>
Date: Fri, 8 May 2020 19:51:55 +0530
Subject: [PATCH] Create Patch File

---
 datafeed/server3.py    |  4 ++--
 src/DataManipulator.ts | 33 +++++++++++++++++++++++----------
 src/DataStreamer.ts    |  2 +-
 src/Graph.tsx          | 26 ++++++++++++++++----------
 4 files changed, 42 insertions(+), 23 deletions(-)

diff --git a/datafeed/server3.py b/datafeed/server3.py
index 2de4e28..1d59866 100644
--- a/datafeed/server3.py
+++ b/datafeed/server3.py
@@ -202,7 +202,7 @@ def get(req_handler, routes):
                 req_handler.wfile.write(bytes(data,  encoding = 'utf-8'))
                 return
 
-def run(routes, host = '0.0.0.0', port = 8080):
+def run(routes, host = '0.0.0.0', port = 8085):
     """ Runs a class as a server whose methods have been decorated with
         @route.
     """
@@ -215,7 +215,7 @@ def run(routes, host = '0.0.0.0', port = 8080):
     thread = threading.Thread(target = server.serve_forever)
     thread.daemon = True
     thread.start()
-    print ('HTTP server started on port 8080')
+    print ('HTTP server started on port 8085')
     while True:
         from time import sleep
         sleep(1)
diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index f6b15ff..4d8edeb 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,33 @@
 import { ServerRespond } from './DataStreamer';
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
+  price_abc: number,
+  price_def: number,
+  ratio: number,
   timestamp: Date,
+  upper_bound: number,
+  lower_bound: number,
+  trigger_alert: number | undefined,
 }
 
 
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]): Row[] {
-    return serverResponds.map((el: any) => {
-      return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
+  static generateRow(serverResponds: ServerRespond[]): Row {
+    const priceABC = (serverResponds[0].top_ask.price + serverResponds[0].top_bid.price)/2;
+    const priceDEF = (serverResponds[1].top_ask.price + serverResponds[1].top_bid.price)/2;
+    const ratio = priceABC / priceDEF;
+    const upper_bound = 1 + 0.07;
+    const lower_bound = 1 - 0.07;
+    return {
+      price_abc: priceABC,
+      price_def: priceDEF,
+      ratio,
+      timestamp: serverResponds[0].timestamp > serverResponds[1].timestamp ?
+                  serverResponds[0].timestamp : serverResponds[1].timestamp,
+      upper_bound: upper_bound,
+      lower_bound: lower_bound,
+      trigger_alert: (ratio > upper_bound || ratio < lower_bound ) ? ratio : undefined,
+
       };
-    })
   }
-}
+}
\ No newline at end of file
diff --git a/src/DataStreamer.ts b/src/DataStreamer.ts
index 9d9eca7..b9e8319 100644
--- a/src/DataStreamer.ts
+++ b/src/DataStreamer.ts
@@ -10,7 +10,7 @@ export interface ServerRespond {
 }
 
 class DataStreamer {
-  static API_URL: string = 'http://localhost:8080/query?id=1';
+  static API_URL: string = 'http://localhost:8085/query?id=1';
 
   static getData(callback: (data: ServerRespond[]) => void): void {
     const request = new XMLHttpRequest();
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 58fb997..f2efe67 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -23,10 +23,14 @@ class Graph extends Component<IProps, {}> {
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
+      price_abc:'float',
+      price_def:'float',
+      ratio:'float',
       stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
       timestamp: 'date',
+      upper_bound:'float',
+      lower_bound:'float',
+      trigger_alert:'float',
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -36,23 +40,25 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
       elem.load(this.table);
       elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
       elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('columns', '["ratio","lower_bound","upper_bound","trigger_alert"]');
       elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
-        timestamp: 'distinct count',
+      price_abc:'avg',
+      price_def:'avg',
+      ratio:'avg',
+      timestamp: 'distinct count',
+      upper_bound:'avg',
+      lower_bound:'avg',
+      trigger_alert:'avg',
       }));
     }
   }
 
   componentDidUpdate() {
     if (this.table) {
-      this.table.update(
+      this.table.update([
         DataManipulator.generateRow(this.props.data),
-      );
+      ]);
     }
   }
 }
-- 
2.18.0.windows.1

